import java_cup.runtime.*;

parser code {:
  public static void main(String[] args) throws Exception {
    if (args.length == 0) {
      System.out.println("Uso: java MeuParser1 <arquivo>");
      return;
    }
    java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.FileReader(args[0]));
    MeuParser1 parser = new MeuParser1(new MeuScannerX(reader));
    parser.parse();
  }
:}


// terminais
terminal Integer INTEIRO; 
terminal MAIS, MENOS, MULT, DIV, RESTO, POT; 
terminal PARENTESQ, PARENTDIR, PTVIRG; 

// não terminais
non terminal Integer expr; 
non terminal inicio; 

// precedência dos operadores
precedence left MAIS, MENOS; 
precedence left MULT, DIV, RESTO; 
precedence right POT; 
precedence right MENOSUNARIO; 

start with inicio; //ponto de partida da análise

inicio ::= expr:e PTVIRG {: System.out.println("Resultado: " + e); :} ; // Regra para o início

expr ::= expr:a MAIS expr:b   {: RESULT = a + b; :}                   // soma
       | expr:a MENOS expr:b  {: RESULT = a - b; :}                   // subtração
       | expr:a MULT expr:b   {: RESULT = a * b; :}                   // multiplicação
       | expr:a DIV expr:b    {: RESULT = a / b; :}                   // divisão
       | expr:a RESTO expr:b  {: RESULT = a % b; :}                   // resto
       | expr:a POT expr:b    {: RESULT = (int)Math.pow(a, b); :}     // potênciação
       | MENOS expr:a         {: RESULT = -a; :} %prec MENOSUNARIO    // sinal negativo
       | PARENTESQ expr:a PARENTDIR {: RESULT = a; :}                 // parênteses
       | INTEIRO:a            {: RESULT = a; :}                       // Número inteiro
       ;